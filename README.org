#+TITLE: ghelp

This package provides a generic help system similar to Emacs Help. Unlike Emacs Help, ghelp works for more major-modes and is extensible with backends.

[[https://github.com/casouri/ghelp#screencasts][☞ Screencasts]]

Currently supported backends:
- [[https://github.com/Wilfred/helpful][helpful]]
- [[https://github.com/joaotavora/eglot][eglot]]

* Install & load

Download the files and add them to load path.

With ~use-package~:
#+BEGIN_SRC emacs-lisp
(use-package ghelp
  :config (ghelp-global-minor-mode))
#+END_SRC
Without ~use-package~:
#+BEGIN_SRC emacs-lisp
(require 'ghelp)
(ghelp-global-minor-mode)
#+END_SRC

* Usage
Currently you can bind ~ghelp-describe-symbol~ and ~ghelp-describe-at-point~ to a keybinding you like, or bind ~ghelp-map~. To resume to a previous opened page (like ~helm-resume~), use ~ghelp-resume~.

To access Emacs Lisp help regardless of your current major mode, use ~ghelp-describe-as-in-emacs-lisp-mode~ and ~ghelp-resume-as-in-emacs-lisp-mode~.

* In ghelp buffer
A ghelp buffet is called a page. Each page is made of several entries. Each entry is a self-contained documentation. (For example, you could have a entry for a symbol as a function and another one for it as a variable.)

Commands you can use:

| Key           | Command                        |
|---------------+--------------------------------|
| =f/b=         | go forward/backward in history |
| =n/p=         | next/previous entry            |
| =m/[=         | next/previous button           |
| =TAB=         | collapse/expand entry          |
| =g=           | refresh page                   |
| =q=           | close page                     |
| =<space>=     | scroll down                    |
| =<backspace>= | scroll up                      |
| =s=           | search/switch to a page        |

* Customization
If you want several major modes to share the same set of history and backends (like ~lisp-interaction-mode~ and ~emacs-lisp-mode~), add an entry ~(mode1 . mode2)~ to ~ghelp-mode-share-alist~, and ~mode1~ will share everything of ~mode2~.

You can customize faces: ~ghelp-entry~, ~ghelp-folded-entry~, and ~ghelp-entry-title~.

Normally if you call ~ghelp-describe-function~ it selects the backends to use by the current major-mode. If you want to look up some symbol with a specific backend, try ~(ghelp-describe-as-in 'mode)~. This function returns a modified ~ghelp-describe-function~ that selects backends by ~mode~. For example, you can bind
#+BEGIN_SRC emacs-lisp
(define-key (kbd "C-h C-e") (ghelp-describe-as-in ’emacs-lisp-mode))
#+END_SRC
to look up Emacs symbols regardless of which major mode you are currently in.

* Write a backend
Each backend is essentially two functions: one returns a list of symbols it knows (or return nil if it can’t), the other returns a list of entries, given informations like symbol or point.

One you have your functions, you can use ~ghelp-register-backend~ to register your backend to a major mode.

** Symbol function
This function takes no arguments and returns a list of symbols (string) that are available. It is okay if the backend can’t do it - in that case just use nil in place of the function when register the backend.

** Describe function
This function takes three arguments: ~symbol~, ~buffer~ and ~point~, and returns a *list* of documentation entries. ~symbol~ is the symbol that user is requesting documentation for, ~buffer~ is the buffer where the user invoked the describe function, and ~point~ is the point (a marker) of the symbol. None of the three arguments is guaranteed non-nil, so the backend need to check them before using. And obviously you don’t need to use all of them.

Each returned entries is a list  ~(title text)~, where ~title~ is the title of the entry and ~text~ is the body text of the entry. Normally you can just return ~symbol~, but the backend can also add some more information to it, e.g., ~"symbol (function)"~ to indicate this documentation is for symbol as a function. BTW don’t end title with a newline unless you want a blank line between the title and the body of you entry in the ghelp buffer. ~text~ is a string of the documentation. And it should end with a newline.

Some tips for porting backends:
1. You can create a temp buffer and return the buffer string.
2. If your documentation includes buttons, remember to used your describe function with ~ghelp--show-page~ for the button action. And set ~yank-excluded-properties~ to ~nil~ when copying buffer text, otherwise the buttons will be damaged.

You can find the same explanation in the documentation of  ~ghelp-sync-backend~. And remember the return value of the describe function is a *list* of entries.

For some example, see the dummy backend at the bottom of =ghelp.el= and working backends in =ghelp-helpful.el= (example for (hacky) button handling) and =ghelp-eglot.el=.

** Register
#+BEGIN_SRC emacs-lisp
(ghelp-register-backend 'major-mode
                        #'symbol-list-function ; can be nil
                        #'describe-symbol-function
                        #'symbol-list-function-for-another-backend ; can be nil
                        #'describe-symbol-function-for-another-backend)
#+END_SRC

* Screencasts
*Eglot*

[[./ghelp-eglot-800.gif]]

*Helpful*

[[./ghelp-helpful-800.gif]]
